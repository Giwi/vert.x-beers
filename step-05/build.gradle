apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'com.github.johnrengelman.shadow'
version = '0.0.1'
def generateSrcPath="$buildDir/generated-src"
def generatedSrcDir = file("$buildDir/generated-src")
repositories {
    jcenter()
}
sourceSets {
    main {
        java.srcDirs += generatedSrcDir
        output.dir(builtBy: 'generateServiceProxy', generateSrcPath)
    }
}
buildscript {
    repositories { jcenter() }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.2'
    }
}

if (!JavaVersion.current().java8Compatible) {
    throw new IllegalStateException('''A Haiku:
                                      |  This needs Java 8,
                                      |  You are using something else,
                                      |  Refresh. Try again.'''.stripMargin())
}

repositories {
    mavenCentral()
    maven {
        url = 'http://oss.sonatype.org/content/repositories/snapshots/'
    }
}

dependencies {
    compile 'io.vertx:vertx-core:3.2.1'
    compile 'io.vertx:vertx-web:3.2.1'
    compile "io.vertx:vertx-service-proxy:3.2.1"
    compile "io.vertx:vertx-codegen:3.2.1"
    compile 'io.vertx:vertx-mongo-client:3.2.1'
}

shadowJar {
    classifier = 'fat'
    manifest {
        attributes 'Main-Class': 'Main'
    }
    mergeServiceFiles {
        include 'META-INF/services/io.org.giwi.org.giwi.vertx.core.spi.VerticleFactory'
    }
    doLast {
        copy {
            from "$buildDir/libs/"
            into "application/"
        }
    }
}

task generateServiceProxy(type: JavaCompile, description: 'Generates EBServiceProxies') {
    source = sourceSets.main.java
    classpath = configurations.
            compile
    destinationDir = generatedSrcDir
    options.compilerArgs = [

            "-proc:only",
            "-processor", "io.vertx.codegen.CodeGenProcessor",

            "-AoutputDirectory=$generateSrcPath"
    ]
}


compileJava.dependsOn generateServiceProxy